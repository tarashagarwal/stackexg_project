c
@result
c
cc
c
@result
c
@result
c
@result
c
@result
c
@result["Continental"]["Pasta"][3]
@result["Continental"]["Pasta"]
@result["Continental"]
@result["Continental"].keys
@result["Continental"]
@result
c
@result.keys
@result.keys.count
@result.keys
@result
c
@menu
@result
c
'c
c
title
@title
c
title
@title
c
title
@title
c
n
c
title
c
@title
c
@title
c
@title
c
@title
title
c
@title
title
c
locale=
locale
locals
locala
local_assigns
locals
title
c
params
c
cx
c
currency
c
Spree::Config.available_currencies.select{|currency| currency.id == :inr}
Spree::Config.available_currencies.first.id
Spree::Config.available_currencies.select{|currency| currency.id == usd}
Spree::Config.available_currencies.select{|currency| currency.id == inr}
Spree::Config.available_currencies.select{|currency| currency.symbol == "$"}
Spree::Config.available_currencies.select{|currency| currency.id == "inr"}
Spree::Config.available_currencies.select{|currency| currency.id == "usd"}
Spree::Config.available_currencies
Spree::Config.available_currencies.pluck("id")
Spree::Config.available_currencies.first
Spree::Config.available_currencies
Spree::Config.available_currencies)
Spree::Config.available_currencies.pluck(:symbol)
Spree::Config.available_currencies
Spree::Config.available_currencies.find("usd")
Spree::Config.available_currencies.find("usd").last
Spree::Config.available_currencies.find("usd")
Spree::Config.available_currencies.first
Spree::Config.available_currencies.last
Spree::Config.available_currencies.last.symbol
Spree::Config.available_currencies
Spree::Config.available_currencies.last.symbol
Spree::Config.available_currencies.last.symol
Spree::Config.available_currencies.last
Spree::Config.available_currencies
Spree::Config.available_currencies.first
}
]]
format
c.exponent,
c.symbol || "¤",
[c.id.to_s.upcase, [
end
"%v %s"
else
"%s%v"
if c.symbol == "" || c.symbol_first
format =
Spree::Config.available_currencies.map { |c|
      }
          ]]
            format
            c.exponent,
            c.symbol || "¤",
          [c.id.to_s.upcase, [
            end
              "%v %s"
            else
              "%s%v"
            if c.symbol == "" || c.symbol_first
          format =
Spree::Config.available_currencies.map { |c|
      }.to_h)
          ]]
            format
            c.exponent,
            c.symbol || "¤",
          [c.id.to_s.upcase, [
            end
              "%v %s"
            else
              "%s%v"
            if c.symbol == "" || c.symbol_first
          format =
        Spree::Config.available_currencies.map { |c|
      JSON.dump(
Spree.currencyInfo = <%==
Spree::Config.available_currencies.first
Spree::Config.available_currencies
Spree.currencyInfo
Spree.currencyinfo
Spree.Currencyinfo
c
variant
c
all_variants = product.variants.eager_load(:prices)
all_variants
c
all_variants.first.option_values
all_variants.first.prices.first
all_variants.first.prices
all_variants.first
all_variants = product.variants_including_master.eager_load(:prices
all_variants
all_variants.first
all_variants
all_variantsa
all_variants = product.variants_including_master.eager_load(:prices).first
all_variants.first
all_variants = product.variants_including_master.eager_load(:prices).first
all_variants = product.variants_including_master.eager_load(:prices)
product.variants_including_master.eager_load(:prices)
c
product.variants_including_master[1].option_values.first
product.variants_including_master[1].option_values.first.option_type
product.variants_including_master[1].option_values.first
product.variants_including_master[1].option_values.first.option _type
product.variants_including_master[1].option_values.first.option _types
product.variants_including_master[1].option_values.first
product.variants_including_master[1].option_values
product.variants_including_master.option_types
product.variants_including_master[1].option_values
product.variants_including_master[1]
product.variants_including_master.pluck(:is_master)
product.variants_including_master
product.variants_including_master.pluck(:name)
product.variants_including_master
product.variants
c
pc
product.variants
product
c
ProductResturant.create!(resturant_id:1,product_id:15)
ProductResturant.create!(resturant_id:15,product_id:14)
ProductResturant
ProductResturant.create!(resturant_id:15,product_id:14)
ProductResturant.last.create!(resturant_id:15,product_id:14)
Spree::Product.last
c
ProductResturant.last(2).pluck(:product_id)
ProductResturant.last(2).pluck(:id)
ProductResturant.last(2)
Spree::Product.last(2).pluck(:id)
ProductResturant.last.update!(product_id:13)
ProductResturant.last
Spree::Product.last(2).pluck(:id)
Spree::Product.last(2)
Spree::Product.last
ProductResturant.last
ProductResturant.first
ProductResturant.all
ProductResturant.last
resturant.products.pluck(:name)
resturant.products
resturant
c
ProductResturant.last
ProductResturant.last.update!(product_id:14)
ProductResturant.last
Spree::Product.last
ProductResturant.last
ProductResturant
resturant.products
products
c
taxon_hash.keysc
taxon_hash.keys
taxon_hash
c
C
c
resturant.products.eager_load(:taxons).eager_load(:prices).first.taxons.eager_load(:taxonomy).first.taxonomy
resturant.products.eager_load(:taxons).eager_load(:prices).first.taxons.eager_load(:taxonomy).first
resturant.products.eager_load(:taxons).eager_load(:prices).first.taxons.eager_load(:taxonomy)
resturant.products.eager_load(:taxons).eager_load(:prices).first.taxons
resturant.products.eager_load(:taxons).eager_load(:prices).first
resturant.products.eager_load(:taxons).eager_load(:prices)
resturant.products.eager_load(:taxons).eger_load(:taxonomy).eager_load(:prices)
resturant.products.eager_load(:taxons).eager_load(:prices)
c
resturant
resturant.products.eager_load(:taxons).eager_load(:prices)
esturant.products.eager_load(:taxons).eager_load(:prices)
c
n
c
result
c
C
c
result
n
c
Spree::Config.currency
Money::Currency
Spree::Money.last
Spree::Money
Spree::Product.last.prices.last
Spree::Product.last.prices
Spree::Product.prices
Curreny
result
c
products  = resturant.products.eager_load(:taxons).eager_load(:prices)
products  = resturant.products.eager_load(:taxons)
n
